#include "msp430.h"                     ; #define controlled include file

E       EQU BIT1
RS      EQU BIT0
DB4     EQU BIT2
DB5     EQU BIT3
DB6     EQU BIT4
DB7     EQU BIT5
DATA4   EQU 00111100b
FuncSet EQU 00001000b
DDRAMSet EQU 10000000b


        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module

        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label
        
        ORG     0FFE8h
        DW      PORT_P
        
        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
       
main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        BIS.B   #0FFh, P2DIR
        mov.b	#03h,P1IE
        mov.b	#03h,P1IES
        bis.w   #GIE, SR
        BIS.B   #0FFh, P2OUT
        
        call #init_lcd
        
    ;;dane  
        bis.b #RS, P2OUT

        mov.b #'Z', R12
        call #send4bit
        mov.b #'E', R12
        call #send4bit
        mov.b #'S', R12
        call #send4bit
        mov.b #'P', R12
        call #send4bit
        mov.b #'O', R12
        call #send4bit
        mov.b #'L', R12
        call #send4bit
        mov.b #' ', R12
        call #send4bit
        mov.b #'2', R12
        call #send4bit
        bic.b #RS,P2OUT
        mov.w #DDRAMSet+64,R12
        call #send4bit
        bis.b #RS,P2OUT
        mov.b #'I', R12
        call #send4bit
        mov.b #'M', R12
        call #send4bit
        mov.b #'P', R12
        call #send4bit
        mov.b #'U', R12
        call #send4bit
        mov.b #'L', R12
        call #send4bit
        mov.b #'S', R12
        call #send4bit
        mov.b #':', R12
        call #send4bit
        mov.b #'0', R12
        call #send4bit
        mov.b  #00h, R5
        JMP $
PORT_P:
        jmp czyszczenie
        RETI
czyszczenie:
        bic.b #RS,P2OUT
        mov.w #DDRAMSet+71,R12
        call #send4bit
        bis.b #RS,P2OUT
        mov.b #' ', R12
        call #send4bit
        mov.b #' ', R12
        call #send4bit
        mov.b #' ', R12
        call #send4bit
        bic.b   #03h, P1IFG
        xor.b   #02h, P1IES
        bit.b   #01h, P1IN
        jz      resetzero
        bit.b   #02h, P1IES
        jz      narastajace
        jnz     opadajace
narastajace:
        bit.b   #04h, P1IN
        jz      zwiekszenie
        jnz     zmniejszenie
opadajace:
        bit.b   #04h, P1IN
        jnz     zwiekszenie
        jz      zmniejszenie
zwiekszenie:
        cmp.b   #063h, R5
        jz      resetsto
        bic.b #RS,P2OUT
        mov.w #DDRAMSet+72,R12
        call #send4bit
        bis.b #RS,P2OUT
        add.b   #01h, R5
        mov.b   R5, R12
        mov.b   #0Ah, R14
        call    #dziel8
        add.b   #030h, R12
        push    R14
        call    #send4bit
        pop     R14
        add.b   #030h, R14 
        mov.b   R14, R12
        call    #send4bit
        RETI
zmniejszenie:
        cmp.b   #00h, R5
        jz      resetzero
        cmp.b   #63h, R5
        jz      lol
        jmp      odejmowanie
lol:
        bic.b #RS,P2OUT
        mov.w #DDRAMSet+71,R12
        call #send4bit
        bis.b #RS,P2OUT
        mov.b #'0', R12
        call #send4bit
        mov.b #'9', R12
        call #send4bit
        mov.b #'9', R12
        call #send4bit
        jmp odejmowanie
odejmowanie:
        bic.b #RS,P2OUT
        mov.w #DDRAMSet+72,R12
        call #send4bit
        bis.b #RS,P2OUT
        mov.b   R5, R12
        mov.b   #0Ah, R14
        call    #dziel8
        add.b   #030h, R12
        push    R14
        call    #send4bit
        pop     R14
        add.b   #030h, R14 
        mov.b   R14, R12
        call    #send4bit
        dec.b   R5
        RETI
resetsto:
       mov.b #063h, R5
       bic.b #RS,P2OUT
       mov.w #DDRAMSet+71,R12
       call #send4bit
       bis.b #RS,P2OUT
       mov.b #'1', R12
       call #send4bit
       mov.b #'0', R12
       call #send4bit
       mov.b #'0', R12
       call #send4bit
       RETI
resetzero:
       mov.b #00h, R5
       bic.b #RS,P2OUT
       mov.w #DDRAMSet+71,R12
       call #send4bit
       bis.b #RS,P2OUT
       mov.b #'0', R12
       call #send4bit
       mov.b #'0', R12
       call #send4bit
       mov.b #'0', R12
       call #send4bit
       RETI   
init_lcd:
        call #delay40ms
        clr.b P2OUT
        mov #3, R14
rep3    bis.b #DB4+DB5+E, P2OUT
        call #delay40ms
        bic.b #E, P2OUT
        call #delay40ms
        dec R14
        jnz rep3
        mov.b #DB5+E, P2OUT
        call #delay40ms
        bic.b #E, P2OUT
        call #delay40ms
        ;;od teraz int 4bit
;function set 4bti + nr line+font
        mov.b #00101100b, R12
        call #send4bit
 ;display off     
        mov.b #00001000b, R12
        call #send4bit

; display clear        
        mov.b #E, P2OUT
        call #delay40ms
        bic.b #E, P2OUT
        call #delay40ms
        mov.b #DB4+E, P2OUT
        call #delay40ms
        bic.b #E, P2OUT
        call #delay40ms
 
   ;entry mode set    
        mov.b #110b, R12
        call #send4bit
                 ;display on+cursor on+blinking on     
        mov.b #00001111b, R12
        call #send4bit
   ;set ddram adres           
        mov.b #DDRAMSet+5, R12  ;ustawienie adresu 5
        call #send4bit 
        
        RET
        
send4bit:
        ;procedra przesylajaca 8 bitowa dana w trybie 4 bitowym
        ;wykorzystuje rejestry R12, R13 i R15
        ;przesylana dana w rejestrze R12
        mov.b R12, R13          ;przechowaj oryginal w R13
        bis.b #E, P2OUT         ;ustawienie E dla zbocza opadajacego
        mov.b P2OUT, R11        ;skopiowanie stanu P2 do R11
        bic.b #00111100b, R11   ;wyzerowanie pozycji na ktorych beda dane
        rrc.b R12               ;rotacje aby uzyskac starsze 4 bity
        rrc.b R12
        bic.b #11000011b, R12   ;pozostawienie starszych 4 bit reszta na zero
        bis.b R12, R11          ;skopiowanie starszych 4 bitow do przygotowane R11
        mov.b R11, P2OUT        ;odtworzenie stanu portu P2 z nowymi 4 bitami
        bic.b #E, P2OUT         ;przeslanie danych do LCD
        call #delay40us          ;opoznienie nota katalogowa
        
        mov.b R13, R12
        bis.b #E, P2OUT
        mov.b P2OUT, R11
        bic.b #00111100b, R11
        rlc.b R12
        rlc.b R12
        bic.b #11000011b, R12
        bis.b R12, R11
        mov.b R11, P2OUT
        bic.b #E, P2OUT
        call #delay40us
        RET
        

            
delay40ms:
        mov #10000, R15
wait40ms:   
        dec R15
        jnz wait40ms
        RET
        
delay40us:
        mov #5, R15
wait40us:   
        dec R15
        jnz wait40us
        RET
dziel8:
            and.b      #0xFF, R12
            and.b       #0xFF, R14
            
dziel16:
            mov.w       R14, R15
            mov.w       R12, R13
            clr.w       R14
            mov.w       #0x1, R12
skok:
            rla.w       R13
            rlc.w       R14
            cmp.w       R15, R14
            jnc         pom
            sub.w       R15, R14
pom:        rlc.w       R12
            jnc         skok
            ret
        END
        